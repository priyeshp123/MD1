#!/usr/bin/ksh

#
# Extract reports for income, balance and cash sheets.
#
# full-submission.txt is the file downloaded from SEC. It contains the core
# 10-K filing, plus a bunch of other documents including reports containing
# financial statements we are interested in. 
# 
# filemap.csv is a mapping file generated by python script extract_reports. 
# It holds a mapping of report description and coresponding document name.
# 
# For each company and financial year, search filemap.csv to identify 
# documents coresponding to income, balance and cash statements. Extract
# these reports.


PROJ_ROOT=/home/priyesh/projects/MD1
DATA_ROOT=/mnt/data/projects/MD1

LOG=$PROJ_ROOT/extract_tables.log
TMPDIR=$PROJ_ROOT/tmp

DATA_DEST=$DATA_ROOT/data/R1000/reports 
DATA_SRC=$DATA_ROOT/data/R1000/stage1

TMP=$TMPDIR/extract_tables.tmp
TMP1=$TMPDIR/extract_tables.tmp1
TMP2=$TMPDIR/extract_tables.tmp2
TMP3=$TMPDIR/extract_tables.tmp3

FILEMAP=filemap.csv
SRC_FILE=full-submission.txt

INC_REPORT=inc_report.htm
CASH_REPORT=cash_report.htm
BAL_REPORT=bal_report.htm

FOUND_INC=$TMPDIR/inc_found
NOT_FOUND_INC=$TMPDIR/inc_not_found
FOUND_BAL=$TMPDIR/bal_found
NOT_FOUND_BAL=$TMPDIR/bal_not_found
FOUND_CASH=$TMPDIR/cash_found
NOT_FOUND_CASH=$TMPDIR/cash_not_found

DEBUG=false

function find_doc_location {

  # Find document location. If found, set F to true and start_pos
  # to line number coresponding to start position.
 
  # Find start position of document

  F=false

  # A number of companies have more than one report to cover subsidiaries. 
  # First one is usually the one for the whole company, so take the first
  # match.
 
  lcount=`wc -l $TMP1 | cut -d" " -f 1`

  if [[ $lcount > 0  ]]
  then 
    filetype=`head -1 $TMP1 | cut -d "!" -f 3`
    search_str="<FILENAME>"`head -1 $TMP1 | cut -d "!" -f 1`
    grep -n $search_str $SRC_FILE >$TMP2

    echo $filetype

    start_pos=`head -1 $TMP2 | cut -d ":" -f 1`
  
    if [[ -n $start_pos ]]
    then
      let start_pos=$start_pos-3
      F=true
    fi  
  fi
}

# Some companies have 2 income statements and the comprehensive one is the 
# a one without sufficient detail so we want to avoid picking that up.
# Others have comprehensive in the title of their main or only income 
# statement.

# So order functions so that we first try a match without comprehensive
# and if they fail, we include comprehensive.


function find_inc_try1 {

  awk 'BEGIN { FS="!" }
       { print $1"!"$3"!"$4 }' $FILEMAP | grep -i '\- STATEMENT \-' | \
  grep -i 'INCOME' | \
  grep -v -i 'COMPREHENSIVE' | \
  grep -v -i 'TAX' | grep -v -i 'CONDENSED' | \
  grep -v -i 'OTHER' | grep -v -i 'CREDIT' | \
  grep -v -i 'ABSTRACT' | \
  grep -v -i '\(SUBSIDIARY\)' | grep -v -i ' DEBT ' | \
  grep -v -i 'CASH ' | grep -v -i ' DEBT ' | grep -v -i 'NOTE ' | \
  grep -v -i 'PARENTH' | grep -v 'PARANTH' >$TMP1 

  find_doc_location
}

function find_inc_try2 {

  awk 'BEGIN { FS="!" }
       { print $1"!"$3"!"$4 }' $FILEMAP | grep -i '\- STATEMENT \-' | \
  grep -i 'EARNINGS' | \
  grep -v -i 'COMPREHENSIVE' | \
  grep -v -i 'TAX' | grep -v -i 'CONDENSED' | \
  grep -v -i 'ABSTRACT' | \
  grep -v -i 'OTHER' | grep -v -i 'CREDIT' | \
  grep -v -i '\(SUBSIDIARY\)' | grep -v -i ' DEBT ' | \
  grep -v -i 'CASH ' | grep -v -i ' DEBT ' | grep -v -i 'NOTE ' | \
  grep -v -i 'PARENTH' | grep -v 'PARANTH' >$TMP1 

  find_doc_location
}

function find_inc_try3 {

  awk 'BEGIN { FS="!" }
       { print $1"!"$3"!"$4 }' $FILEMAP | grep -i '\- STATEMENT \-' | \
  grep -i 'OPERATIONS' | \
  grep -v -i 'COMPREHENSIVE' | \
  grep -v -i 'TAX' | grep -v -i 'CONDENSED' | \
  grep -v -i 'OTHER' | grep -v -i 'CREDIT' | \
  grep -v -i 'ABSTRACT' | \
  grep -v -i '\(SUBSIDIARY\)' | grep -v -i ' DEBT ' | \
  grep -v -i 'CASH ' | grep -v -i ' DEBT ' | grep -v -i 'NOTE ' | \
  grep -v -i 'PARENTH' | grep -v 'PARANTH' >$TMP1 

  find_doc_location
}

function find_inc_try4 {

  awk 'BEGIN { FS="!" }
       { print $1"!"$3"!"$4 }' $FILEMAP | grep -i '\- STATEMENT \-' | \
  grep -i 'LOSS' | \
  grep -v -i 'COMPREHENSIVE' | \
  grep -v -i 'TAX' | grep -v -i 'CONDENSED' | \
  grep -v -i 'OTHER' | grep -v -i 'CREDIT' | \
  grep -v -i 'ABSTRACT' | \
  grep -v -i '\(SUBSIDIARY\)' | grep -v -i ' DEBT ' | \
  grep -v -i 'CASH ' | grep -v -i ' DEBT ' | grep -v -i 'NOTE ' | \
  grep -v -i 'PARENTH' | grep -v 'PARANTH' >$TMP1 

  find_doc_location
}

# Same as above but this time we don't exclude COMPREHENSIVE

function find_inc_try5 {

  awk 'BEGIN { FS="!" }
       { print $1"!"$3"!"$4 }' $FILEMAP | grep -i '\- STATEMENT \-' | \
  grep -i 'INCOME' | \
  grep -v -i 'TAX' | grep -v -i 'CONDENSED' | \
  grep -v -i 'OTHER' | grep -v -i 'CREDIT' | \
  grep -v -i 'ABSTRACT' | \
  grep -v -i '\(SUBSIDIARY\)' | grep -v -i ' DEBT ' | \
  grep -v -i 'CASH ' | grep -v -i ' DEBT ' | grep -v -i 'NOTE ' | \
  grep -v -i 'PARENTH' | grep -v 'PARANTH' >$TMP1 

  find_doc_location
}

function find_inc_try6 {

  awk 'BEGIN { FS="!" }
       { print $1"!"$3"!"$4 }' $FILEMAP | grep -i '\- STATEMENT \-' | \
  grep -i 'EARNINGS' | \
  grep -v -i 'TAX' | grep -v -i 'CONDENSED' | \
  grep -v -i 'ABSTRACT' | \
  grep -v -i 'OTHER' | grep -v -i 'CREDIT' | \
  grep -v -i '\(SUBSIDIARY\)' | grep -v -i ' DEBT ' | \
  grep -v -i 'CASH ' | grep -v -i ' DEBT ' | grep -v -i 'NOTE ' | \
  grep -v -i 'PARENTH' | grep -v 'PARANTH' >$TMP1 

  find_doc_location
}

function find_inc_try7 {

  awk 'BEGIN { FS="!" }
       { print $1"!"$3"!"$4 }' $FILEMAP | grep -i '\- STATEMENT \-' | \
  grep -i 'OPERATIONS' | \
  grep -v -i 'TAX' | grep -v -i 'CONDENSED' | \
  grep -v -i 'OTHER' | grep -v -i 'CREDIT' | \
  grep -v -i 'ABSTRACT' | \
  grep -v -i '\(SUBSIDIARY\)' | grep -v -i ' DEBT ' | \
  grep -v -i 'CASH ' | grep -v -i ' DEBT ' | grep -v -i 'NOTE ' | \
  grep -v -i 'PARENTH' | grep -v 'PARANTH' >$TMP1 

  find_doc_location
}

function find_inc_try8 {

  awk 'BEGIN { FS="!" }
       { print $1"!"$3"!"$4 }' $FILEMAP | grep -i '\- STATEMENT \-' | \
  grep -i 'LOSS' | \
  grep -v -i 'TAX' | grep -v -i 'CONDENSED' | \
  grep -v -i 'OTHER' | grep -v -i 'CREDIT' | \
  grep -v -i 'ABSTRACT' | \
  grep -v -i '\(SUBSIDIARY\)' | grep -v -i ' DEBT ' | \
  grep -v -i 'CASH ' | grep -v -i ' DEBT ' | grep -v -i 'NOTE ' | \
  grep -v -i 'PARENTH' | grep -v 'PARANTH' >$TMP1 

  find_doc_location
}

function find_bal_try1 {

  awk 'BEGIN { FS="!" }
       { print $1"!"$3"!"$4 }' $FILEMAP | grep -i '\- STATEMENT \-' | \
  grep -i 'BALANCE' | \
  grep -v -i 'TAX' | grep -v -i 'CONDENSED' | \
  grep -v -i 'ABSTRACT' | \
  grep -v -i '\(SUBSIDIARY\)' | grep -v -i ' DEBT ' | \
  grep -v -i 'CASH ' | grep -v -i ' DEBT ' | grep -v -i 'NOTE ' | \
  grep -v -i 'PARENTH' | grep -v 'PARANTH' >$TMP1

  find_doc_location
}

function find_bal_try2 {

  awk 'BEGIN { FS="!" }
       { print $1"!"$3"!"$4 }' $FILEMAP | grep -i '\- STATEMENT \-' | \
  grep -i 'FINANCIAL POSITION' | \
  grep -v -i 'TAX' | grep -v -i 'CONDENSED' | \
  grep -v -i 'ABSTRACT' | \
  grep -v -i '\(SUBSIDIARY\)' | grep -v -i ' DEBT ' | \
  grep -v -i 'CASH ' | grep -v -i ' DEBT ' | grep -v -i 'NOTE ' | \
  grep -v -i 'PARENTH' | grep -v 'PARANTH' >$TMP1

  find_doc_location
}

function find_bal_try3 {

  awk 'BEGIN { FS="!" }
       { print $1"!"$3"!"$4 }' $FILEMAP | grep -i '\- STATEMENT \-' | \
  grep -i 'CONDITION' | \
  grep -v -i 'TAX' | grep -v -i 'CONDENSED' | \
  grep -v -i 'OTHER' | grep -v -i 'CREDIT' | \
  grep -v -i 'ABSTRACT' | \
  grep -v -i '\(SUBSIDIARY\)' | grep -v -i ' DEBT ' | \
  grep -v -i 'CASH ' | grep -v -i ' DEBT ' | grep -v -i 'NOTE ' | \
  grep -v -i 'PARENTH' | grep -v 'PARANTH' >$TMP1 

  find_doc_location
}

function find_cash_try1 {

  awk 'BEGIN { FS="!" }
       { print $1"!"$3"!"$4 }' $FILEMAP | grep -i '\- STATEMENT \-' | \
  grep -i 'CASH' | \
  grep -v -i 'OTHER' | grep -v -i 'CREDIT' | grep -v 'CONDENSED' | \
  grep -v -i 'ABSTRACT' | \
  grep -v -i '\(SUBSIDIARY\)' | grep -v -i ' DEBT ' | \
  grep -v -i ' DEBT ' | grep -v -i 'NOTE ' | grep -v -i 'COMPONENTS ' | \
  grep -v -i 'BASIS ' | grep -v -i 'NON-CASH ' | \
  grep -v -i 'SUPPLEMENTAL ' | grep -v -i 'DISCLOSURE ' | \
  grep -v -i 'PARENTH' | grep -v 'PARANTH' >$TMP1

  find_doc_location
}

function extract_income_statement {

  # Find and extract Income report 

  F=false

  find_inc_try1     # Sets F to true if found and start_pos to line
                    # number of start position of document in source file.

  [[ $F == false ]] && find_inc_try2 
  [[ $F == false ]] && find_inc_try3 
  [[ $F == false ]] && find_inc_try4 
  [[ $F == false ]] && find_inc_try5 
  [[ $F == false ]] && find_inc_try6 
  [[ $F == false ]] && find_inc_try7 
  [[ $F == false ]] && find_inc_try8 

  if [[ $F == true ]]
  then
     # Look for end of document tag after the line matched

     grep -n '</DOCUMENT>' $SRC_FILE | cut -d ":" -f 1 | \
        awk -v x=$start_pos '{if($1>x) print$1}' | head -1 > $TMP 
        
     end_pos=`cat $TMP | cut -d" " -f 1`

     if [[ -n $end_pos ]] 
     then 
        #Extract Report 

        let DIFF=$end_pos-$start_pos+1
        head -$end_pos $SRC_FILE | tail -$DIFF >$DATA_DEST/$SYMBOL/$FILING/inc_report.$filetype
     else
        echo "Error: "$SYMBOL" "$FILING 
        echo "Error: /DOCUMENT not found"  
     fi

     echo $SYMBOL" "$SRC_FILE >>$FOUND_INC 
  else
     echo " Income report not found: "$SYMBOL" "$FILING 
     echo $SYMBOL" "$FILING >>$NOT_FOUND_INC   

     if [[ $DEBUG == true ]]
     then
       cp $TMP $TMPDIR/extract_tables.tmp.bal.$FILING
       cp $TMP1 $TMPDIR/extract_tables.tmp1.bal.$FILING
       cp $TMP2 $TMPDIR/extract_tables.tmp2.bal.$FILING
     fi
  fi
}

function extract_balance_statement {

  # Find and extract balance table

  F=false

  find_bal_try1

  [[ $F == false ]] && find_bal_try2 
  [[ $F == false ]] && find_bal_try3 

  if [[ $F == true ]]
  then
    # Look for end of table tag after the line matched

    grep -n '</DOCUMENT>' $SRC_FILE | cut -d ":" -f 1 | \
        awk -v x=$start_pos '{if($1>x) print$1}' | head -1 > $TMP 
        
    end_pos=`cat $TMP | cut -d" " -f 1`

    if [[ -n $end_pos ]] 
    then 
      #Extract table

      let DIFF=$end_pos-$start_pos+1
      head -$end_pos $SRC_FILE | tail -$DIFF >$DATA_DEST/$SYMBOL/$FILING/bal_report.$filetype
    else
      echo "Error: "$SYMBOL" "$FILING 
      echo "Error /DOCUMENT not found" 
    fi

    echo $SYMBOL" "$SRC_FILE >>$FOUND_BAL   

  else
    echo "Balance report not found: "$SYMBOL" "$FILING 
    echo $SYMBOL" "$FILING >>$NOT_FOUND_BAL   

    if [[ $DEBUG == true ]]
    then
      cp $TMP $TMPDIR/extract_tables.tmp.bal.$FILING
      cp $TMP1 $TMPDIR/extract_tables.tmp1.bal.$FILING
      cp $TMP2 $TMPDIR/extract_tables.tmp2.bal.$FILING
    fi
  fi
}

function extract_cash_statement {

  # Find and extract cash report 
     
  find_cash_try1

  if [[ $F == true ]]
  then
    # Look for end of document tag after the line matched

    grep -n '</DOCUMENT>' $SRC_FILE | cut -d ":" -f 1 | \
         awk -v x=$start_pos '{if($1>x) print$1}' | head -1 > $TMP 
        
    end_pos=`cat $TMP | cut -d" " -f 1`

    if [[ -n $end_pos ]] 
    then 
      #Extract table

      let DIFF=$end_pos-$start_pos+1
      head -$end_pos $SRC_FILE | tail -$DIFF >$DATA_DEST/$SYMBOL/$FILING/cash_report.$filetype
    else
      echo "Error: "$SYMBOL" "$FILING 
      echo "Error /DOCUMENT not found" 
    fi

    echo $SYMBOL" "$FILING >>$FOUND_CASH   
  else
    echo "Cash report not found: "$SYMBOL" "$FILING 
    echo $SYMBOL" "$FILING >>$NOT_FOUND_CASH   
    
    if [[ $DEBUG == true ]]
    then
      cp $TMP $TMPDIR/extract_tables.tmp.cash.$FILING
      cp $TMP1 $TMPDIR/extract_tables.tmp1.cash.$FILING
      cp $TMP2 $TMPDIR/extract_tables.tmp2.cash.$FILING
    fi
  fi
} 

echo " " >$FOUND_INC
echo " " >$NOT_FOUND_INC
echo " " >$FOUND_BAL
echo " " >$NOT_FOUND_BAL
echo " " >$FOUND_CASH
echo " " >$NOT_FOUND_CASH

cd $DATA_SRC

for SYMBOL in `cat $PROJ_ROOT/files/tickers`
do
  echo "SYMBOL:" ${SYMBOL}

  if [ ! -d $SYMBOL ]
  then
    break
  fi

  cd $SYMBOL
 
  for FILING in * 
  do
    if [ ! -d $FILING ]
    then 
      break
    fi

    mkdir -p $DATA_DEST/$SYMBOL/$FILING
 
    cd $FILING
    echo $SYMBOL" "$FILING

    if [[ ! -f $FILEMAP ]]
    then
      echo "Error: "$SYMBOL" "$FILING 
      echo $FILEMAP" not found"
    else
      # Uncompress file 

      if [[ -f ${SRC_FILE}.gz ]]
      then
        gzip -d ${SRC_FILE}.gz
      fi

      extract_income_statement
      extract_balance_statement
      extract_cash_statement

      # Compress file

      echo "compress file"

      gzip ${SRC_FILE}
    fi

    cd $DATA_SRC/$SYMBOL 
  done

  cd $DATA_SRC 
done

